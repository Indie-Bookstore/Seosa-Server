# github workflow (edit)
name: Deploy To EC2

on:
  push:
    branches:
      - deploy

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 파일 만들기
        run: |
          cd ./seosa/src/main
          mkdir -p resources
          cd resources
          cat <<EOF > application.yml
          ${{ secrets.APPLICATION_PROPERTIES }}
          EOF

      - name: 테스트 및 빌드하기
        run: |
          cd ./seosa
          ./gradlew clean build

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인하기
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Docker 이미지 생성
        run: |
          cd ./seosa
          docker build -t seosa-server .

      - name: Docker 이미지에 Tag 붙이기
        run: |
          cd ./seosa
          docker tag seosa-server ${{ steps.login-ecr.outputs.registry }}/seosa-server:latest

      - name: ECR에 Docker 이미지 Push하기
        run: |
          cd ./seosa
          docker push ${{ steps.login-ecr.outputs.registry }}/seosa-server:latest

      - name: SSH로 EC2에 접속하여 배포 및 상태 확인
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |            
            echo "🔄 배포를 시작합니다..."

            # 환경 변수 저장
            echo "🔍 .env 파일을 생성합니다..."
            cat <<EOF > /home/ubuntu/seosa.env
            SPRING_REDIS_HOST=seosa-redis
            SPRING_REDIS_PORT=6379
            SPRING_MAIL_USERNAME=${{ secrets.SPRING_MAIL_USERNAME }}
            SPRING_MAIL_PASSWORD=${{ secrets.SPRING_MAIL_PASSWORD }}
            JAVA_OPTS=-Xmx256m -Xms128m
            EOF

            echo "🔝 빌트중 아직 사용안하는 Docker 이미지 제거"
            docker image prune -f

            if docker ps -q --filter "name=seosa-redis" | grep -q .; then
              echo "✅ Redis가 이미 실행 중입니다."
            else
              echo "🚀 Redis 컨테이너를 실행합니다..."
              docker run -d --name seosa-redis -p 6379:6379 \
                --memory=256m redis:latest
            fi

            echo "🔝 기존 케이드 중지/삭제"
            docker stop seosa-server || true
            docker rm seosa-server || true

            echo "⬇️ 최신 이미지 가져오기"
            docker pull ${{ steps.login-ecr.outputs.registry }}/seosa-server:latest

            echo "🚀 애플리케이션 컨테이너 실행"
            docker run -d --name seosa-server --link seosa-redis -p 8080:8080 \
              --restart always \
              -m 512m --memory-swap 1g \
              --env-file /home/ubuntu/seosa.env \
              ${{ steps.login-ecr.outputs.registry }}/seosa-server:latest

            echo "✅ 배포 완료! 상태 확인 시작..."

            # Redis 컨테이너 상태 확인
            echo "🔍 Redis 컨테이너 상태 확인 중..."
            if docker ps | grep -q seosa-redis; then
              echo "✅ Redis가 정상적으로 실행 중입니다!"
            else
              echo "❌ Redis가 실행되지 않았습니다! 배포 실패!"
              exit 1
            fi

            # 애플리케이션 컨테이너 상태 확인
            echo "🔍 애플리케이션 컨테이너 상태 확인 중..."
            if docker ps | grep -q seosa-server; then
              echo "✅ 애플리케이션이 정상적으로 실행 중입니다!"
            else
              echo "❌ 애플리케이션이 실행되지 않았습니다! 배포 실패!"
              exit 1
            fi

            # Redis PING 테스트
            echo "🔄 Redis PING 테스트 중..."
            REDIS_PING=$(docker exec seosa-redis redis-cli ping)
            if [ "$REDIS_PING" = "PONG" ]; then
              echo "✅ Redis가 정상 작동 중입니다!"
            else
              echo "❌ Redis에 연결할 수 없습니다! 배포 실패!"
              exit 1
            fi

            # Nginx 설정 테스트 및 재시작
            echo "🔄 Nginx 설정 테스트 및 재시작..."
            sudo nginx -t && sudo systemctl restart nginx

      - name: 애플리케이션 상태 확인
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |            
            echo "애플리케이션 상태를 확인합니다..."
            sleep 5
            docker ps -a
            docker logs --tail 50 seosa-server
